<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>量化笔记之qlib-1</title>
    <link href="/2023/02/01/%E9%87%8F%E5%8C%96%E7%AC%94%E8%AE%B0%E4%B9%8Bqlib-1/%E9%87%8F%E5%8C%96%E7%AC%94%E8%AE%B0%E4%B9%8Bqlib-1/"/>
    <url>/2023/02/01/%E9%87%8F%E5%8C%96%E7%AC%94%E8%AE%B0%E4%B9%8Bqlib-1/%E9%87%8F%E5%8C%96%E7%AC%94%E8%AE%B0%E4%B9%8Bqlib-1/</url>
    
    <content type="html"><![CDATA[<h1 id="快速上手Qlib"><a href="#快速上手Qlib" class="headerlink" title="快速上手Qlib"></a>快速上手Qlib</h1><h2 id="Qlib安装-见官网"><a href="#Qlib安装-见官网" class="headerlink" title="Qlib安装 见官网"></a>Qlib安装 见官网</h2><ul><li>安装Microsoft C++生成工具</li><li>setup.py安装</li><li>数据准备<ul><li>支持dump_all转换用户数据格式 csv -&gt; bin + txt<ul><li>建议采用复权价格</li><li>数据需包含factor或者change字段<figure class="highlight jboss-cli"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs jboss-cli">python scripts/dump_bin.py dump_all <span class="hljs-params">--csv_path</span> ~<span class="hljs-string">/.qlib/csv_data/hk_data</span><br><span class="hljs-params">--qlib_dir</span> ~<span class="hljs-string">/.qlib/qlib_data/hk_data</span> <span class="hljs-params">--symbol_field_name</span> stock_code<br><span class="hljs-params">--date_field_name</span> date <span class="hljs-params">--include_fields</span><br>open,high,low,close,volume,money,factor,vwap,change<br></code></pre></td></tr></table></figure>上述 dump_all 指令包含如下参数：</li></ul></li></ul></li></ul><ol><li>symbol_field_name：csv 文件中股票代码列名，此处为 stock_code；</li><li>date_field_name：csv 文件中日期列名，此处为 date；</li><li>include_fields：其余字段名，注意逗号后不能有空格，否则数据转换将出现错误。</li></ol><p>该路径下包含 calendar、features 和 instruments 三个子文件夹，分别存放交易日历、行情特<br>征和股票池。其中行情特征为 bin 格式.</p><p>reference:<br>Yang, X. , Liu, W. , Zhou, D. , Bian, J. , &amp; Liu, T. Y. . (2020). Qlib: an ai-oriented<br>quantitative investment platform. arXiv.</p>]]></content>
    
    
    
    <tags>
      
      <tag>qlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES 自动补全</title>
    <link href="/2022/05/15/ES-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
    <url>/2022/05/15/ES-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h1><h2 id="拼音分词器"><a href="#拼音分词器" class="headerlink" title="拼音分词器"></a>拼音分词器</h2><ul><li>安装拼音分词插件 <a href="https://github.com/medcl/elasticsearch-analysis-pinyin">https://github.com/medcl/elasticsearch-analysis-pinyin</a></li></ul><ol><li>解压</li><li>上传到虚拟机，es的plugin目录</li><li>重启es<h2 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h2></li></ol><ul><li>es分词器（analyzer）组成包含三部分：<ul><li>character filters： 在tokenizer之前对文本进行处理，例如删除字符，替换字符</li><li>tokenizer：讲文本按照一定的规则切割成term，例如ik_smart</li><li>tokenizer filter: 将tokenizer输出等词条进一步处理：大小写转换，同义词处理，拼音处理等</li></ul></li></ul><hr><ul><li>创建索引库时，通过settings来配置自定义的analyzer：<figure class="highlight d"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs d">PUT /test<br>&#123;<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;analyzer&quot;</span>: &#123; <span class="hljs-comment">//自定义分词器</span><br>                <span class="hljs-string">&quot;my_analyzer&quot;</span>: &#123; <span class="hljs-comment">//分词器名称</span><br>                    <span class="hljs-string">&quot;tokenizer&quot;</span>; <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>                    <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;py&quot;</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;filter&quot;</span>: &#123; <span class="hljs-comment">//自定义tokenizer filter</span><br>                <span class="hljs-string">&quot;py&quot;</span>: &#123; <span class="hljs-comment">//过滤器名称</span><br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;pinyin&quot;</span>, <span class="hljs-comment">//过滤器类型，这里是pinyin</span><br>                    <span class="hljs-string">&quot;keep_full_pinyin&quot;</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;keep_joined_full_pinyin: true,</span><br><span class="hljs-string">                    &quot;</span>keep_original<span class="hljs-string">&quot;: true,</span><br><span class="hljs-string">                    &quot;</span>limit_first_letter_length<span class="hljs-string">&quot;: 16,</span><br><span class="hljs-string">                    &quot;</span>remove_duplicated_term<span class="hljs-string">&quot;: true,</span><br><span class="hljs-string">                    &quot;</span>none_chinese_pinyin_tokenize<span class="hljs-string">&quot;: false</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;</span>mappings<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">        &quot;</span>properties<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">            &quot;</span>name<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">                &quot;</span>type<span class="hljs-string">&quot; :&quot;</span>text<span class="hljs-string">&quot;,</span><br><span class="hljs-string">                &quot;</span>analyze<span class="hljs-string">r&quot; : &quot;</span>my_analyze<span class="hljs-string">r&quot;, //创建倒排索引时用my_analyzer</span><br><span class="hljs-string">                &quot;</span>search_analyze<span class="hljs-string">r&quot;: &quot;</span>ik_smart<span class="hljs-string">&quot; //搜索时用ik_smart分词器</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="自动补全查询"><a href="#自动补全查询" class="headerlink" title="自动补全查询"></a>自动补全查询</h2><h3 id="completion-suggester查询"><a href="#completion-suggester查询" class="headerlink" title="completion suggester查询"></a>completion suggester查询</h3></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES 数据聚合</title>
    <link href="/2022/05/15/ES-%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/"/>
    <url>/2022/05/15/ES-%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h1><h2 id="聚合的种类"><a href="#聚合的种类" class="headerlink" title="聚合的种类"></a>聚合的种类</h2><ul><li>数据的统计，分析，运算<ul><li>Bucket聚合：用来对文档分组<ul><li>TermAggregation 按字段分组</li><li>Date Histogram 按照日期分组</li></ul></li><li>Metric聚合<ul><li>Avg</li><li>Max</li><li>Min</li><li>Stats：同时求max，min，avg，sum等</li></ul></li><li>Pipeline聚合： 其他聚合的结果做聚合</li></ul></li></ul><hr><h2 id="DSL实现聚合"><a href="#DSL实现聚合" class="headerlink" title="DSL实现聚合"></a>DSL实现聚合</h2><ul><li>Bucket聚合<figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/hotel/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;lte&quot;</span>: <span class="hljs-number">200</span>  <span class="hljs-regexp">//</span>限定聚合的文档范围，只对<span class="hljs-number">200</span>元以下的文档聚合<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-regexp">//</span>设置size为<span class="hljs-number">0</span>，结果中不包含文档，只包含聚合结果<br>    <span class="hljs-string">&quot;aggs&quot;</span>: &#123; <span class="hljs-regexp">//</span>定义聚合<br>        <span class="hljs-string">&quot;brandAgg&quot;</span>: &#123; <span class="hljs-regexp">//</span>给聚合命名<br>            <span class="hljs-string">&quot;terms&quot;</span>: &#123; <span class="hljs-regexp">//</span>聚合的类型<br>                <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;brand&quot;</span>, <span class="hljs-regexp">//</span>参与聚合的字段<br>                <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">20</span>， <span class="hljs-regexp">//</span>希望获取的结果数量<br>                <span class="hljs-string">&quot;order&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;_count&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Metrics聚合<ul><li>例如，获取每个品牌的用户评分的min，max，avg等值<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stata">GET /<span class="hljs-keyword">hotel</span>/_search<br>&#123;<br>    <span class="hljs-string">&quot;size&quot;</span>: 0, <span class="hljs-comment">//设置size为0，结果中不包含文档，只包含聚合结果</span><br>    <span class="hljs-string">&quot;aggs&quot;</span>: &#123; <span class="hljs-comment">//定义聚合</span><br>        <span class="hljs-string">&quot;brandAgg&quot;</span>: &#123; <span class="hljs-comment">//给聚合命名</span><br>            <span class="hljs-string">&quot;terms&quot;</span>: &#123; <span class="hljs-comment">//聚合的类型</span><br>                <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;brand&quot;</span>, <span class="hljs-comment">//参与聚合的字段</span><br>                <span class="hljs-string">&quot;size&quot;</span>: 20, <span class="hljs-comment">//希望获取的结果数量</span><br>                <span class="hljs-string">&quot;order&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;score_stats.avg&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>                &#125;<br>            &#125;，<br>            “aggs&quot;: &#123; <span class="hljs-comment">// 是brands聚合的子聚合，分组后对每组分别计算</span><br>                <span class="hljs-string">&quot;score_stats&quot;</span>: &#123; <span class="hljs-comment">// 聚合名称</span><br>                    <span class="hljs-string">&quot;stats&quot;</span>: &#123; <span class="hljs-comment">// 聚合类型</span><br>                        <span class="hljs-string">&quot;field&quot;</span> : <span class="hljs-string">&quot;score&quot;</span> <span class="hljs-comment">//聚合字段， 这里是score</span><br>                        &#125;<br>                    &#125;<br>                &#125;     <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li>RestAPI实现聚合</li></ul><ol><li>准备Request<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">SearchRequest request <span class="hljs-operator">=</span> new SearchRequest(<span class="hljs-string">&quot;hotel&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li>准备DSL<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// query</span><br><span class="hljs-built_in">buildBasicQuery</span>(params, request);<br><span class="hljs-comment">// 设置size</span><br>request<span class="hljs-selector-class">.source</span>()<span class="hljs-selector-class">.size</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 聚合</span><br>request<span class="hljs-selector-class">.source</span>()<span class="hljs-selector-class">.aggregation</span>(AggregationBuilders.<br>        .terms(&quot;brandAgg&quot;)<br>        <span class="hljs-selector-class">.field</span>(&quot;brand&quot;)<br>        <span class="hljs-selector-class">.size</span>(<span class="hljs-number">10</span>)<br>        );<br></code></pre></td></tr></table></figure></li><li>发出请求<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RestHighLevelClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> nnew <span class="hljs-title function_">RestHighLevelClient</span><span class="hljs-params">(RestClient.builder(</span><br><span class="hljs-params">    HttpHost.create(<span class="hljs-string">&quot;http://localhost:9200&quot;</span>)</span>));<br><span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptios.DEFAULT);<br></code></pre></td></tr></table></figure></li><li>解析聚合结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> response.getAggregations();<br><br><span class="hljs-comment">// 根据名称获取聚合结果</span><br><span class="hljs-type">Terms</span> <span class="hljs-variable">brandTerms</span> <span class="hljs-operator">=</span> aggregations.get(<span class="hljs-string">&quot;brandAgg&quot;</span>);<br><br><span class="hljs-comment">// 获取桶</span><br>List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();<br><br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">for</span> (Terms.Bucket bucket : buckets)&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">brandName</span> <span class="hljs-operator">=</span> bucket.getKeyAsString();<br>    System.out.println(brandName);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch 初探</title>
    <link href="/2022/05/13/ElasticSearch-%E5%88%9D%E6%8E%A2/"/>
    <url>/2022/05/13/ElasticSearch-%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<p>初识ES！了解什么是ES和安装过程</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="什么是ES"><a href="#什么是ES" class="headerlink" title="什么是ES"></a>什么是ES</h3><h3 id="快速安装ES"><a href="#快速安装ES" class="headerlink" title="快速安装ES"></a>快速安装ES</h3>]]></content>
    
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/12/hello-world/"/>
    <url>/2022/05/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
